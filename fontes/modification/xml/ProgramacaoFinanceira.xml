<?xml version="1.0" encoding="ISO-8859-1"?>
<modification>
  <id>ProgramacaoFinanceira</id>

  <file path='emp4_empempenho004.php'>
    <operation>
      <search><![CDATA[/* [Extensão] Programação Financeira */]]></search>
      <add position="after"><![CDATA[

        require_once(modification("model/orcamento/ProgramacaoFinanceira/ProgramacaoFinanceira.model.php"));

        $oInstituicao = InstituicaoRepository::getInstituicaoByCodigo($iInstituicao);
        if (!ProgramacaoFinanceira::possuiProgramacaoInstituicaoAno($oInstituicao, $anousu, true)) {
          throw new BusinessException("Não é possível emitir o empenho, pois não há programação financeira aprovada para a instituição e o exercício atual.");
        }

        $oDataSessao  = new DBDate(date('Y-m-d', db_getsession('DB_datausu')));
        $oProgramacaoFinanceira = ProgramacaoFinanceira::getInstanciaPorInstituicaoAno($oInstituicao, $oDataSessao->getAno());
        $oFechamento = new FechamentoMensal($oProgramacaoFinanceira);
        if ($oFechamento->mesFechado($oDataSessao->getMes())) {

          $sqlerro  = true;
          $sMes     = DBDate::getMesExtenso($oDataSessao->getMes());
          $erro_msg = "Não é possível realizar Emissão de Empenho, pois a Programação Financeira já está fechada para o mês de {$sMes}.";
        }
        ]]>
      </add>
    </operation>

    <operation>
      <search><![CDATA[/** [Extensao ProgramacaoFinanceira] - Bloqueio de Empenho por SALDO */]]></search>
      <add position="after"><![CDATA[

        if (!$sqlerro) {

          require_once('model/orcamento/ProgramacaoFinanceira/FichaFinanceira.model.php');
          require_once('model/orcamento/ProgramacaoFinanceira/FichaFinanceiraRepository.model.php');
          require_once('model/orcamento/ProgramacaoFinanceira/SaldoFichaFinanceira.model.php');
          require_once('model/orcamento/ProgramacaoFinanceira/FichaFinanceiraValor.model.php');

          $oEmpenhoFinanceiro = EmpenhoFinanceiroRepository::getEmpenhoFinanceiroPorNumero($e60_numemp);
          $oFichaFinanceira   = FichaFinanceiraRepository::getInstanciaPorDotacao($oEmpenhoFinanceiro->getDotacao());
          $oDataEmissao       = new DBDate($oEmpenhoFinanceiro->getDataEmissao());
          $oSaldoFichaFinanceira = new SaldoFichaFinanceira($oFichaFinanceira, $oDataEmissao->getMes());

          $oPlugin       = new Plugin ( null, 'ProgramacaoFinanceira' );
          $aConfiguracao = PluginService::getPluginConfig ( $oPlugin );
    
          $aInstituicoesNaoValida = explode ( ",", $aConfiguracao["InstituicaoNaoValidaSaldo"] );
          
          if (!in_array($db_getsession("DB_instit"), $aInstituicoesNaoValida) && ! $oSaldoFichaFinanceira->possuiSaldoEmpenhar($oEmpenhoFinanceiro->getValorEmpenho())) {
		      //Instancia uma objeto saldofichafinanceira para cada um dos doze meses, e compara com cada uma das cotas
		      $sMensagem = "";
		      for ($i=1; $i <= 12; $i++) { 
		        $oSaldoFichaFinanceiraMes = new SaldoFichaFinanceira($oFichaFinanceira, $i);
		        if(!$oSaldoFichaFinanceiraMes->possuiSaldoEmpenhar(${"cota_".$i})) {
		          $sqlerro    = true;
		          $sValor     = trim(db_formatar($oSaldoFichaFinanceiraMes->getValorDisponivelParaEmpenho(), 'f'));
		          $sMensagem .= "Não há saldo suficiente na ficha {$oFichaFinanceira->getDescricao()} do mês {$i} para empenhar.";
		          $sMensagem .= "\\n\\nSaldo Disponível no mês {$i}: {$sValor} \\n\\n";
		        }
		      }
		      if ($sqlerro) {
		        throw new Exception($sMensagem);
		      }
          }
          /*if ( ! $oSaldoFichaFinanceira->possuiSaldoEmpenhar($oEmpenhoFinanceiro->getValorEmpenho())) {

            $sqlerro  = true;
            $sValor = trim(db_formatar($oSaldoFichaFinanceira->getValorDisponivelParaEmpenho(), 'f'));
            $sMensagem  = "Não há saldo suficiente na ficha {$oFichaFinanceira->getDescricao()} para empenhar.";
            $sMensagem .= "\\n\\nSaldo Disponível: {$sValor}";
            throw new Exception($sMensagem);
          }*/
        }
        ]]>
      </add>
    </operation>
  </file>
  <file path="emp1_empautoriza004.php">
    <operation>
      <search><![CDATA[/* [Extensão] Programação Financeira */]]></search>
      <add position="after">
        <![CDATA[
  require_once(modification("model/orcamento/ProgramacaoFinanceira/ProgramacaoFinanceira.model.php"));

  $oInstituicao = InstituicaoRepository::getInstituicaoByCodigo(db_getsession('DB_instit'));
  if (!ProgramacaoFinanceira::possuiProgramacaoInstituicaoAno($oInstituicao, $iAnoUsu, true)) {

    $sqlerro = true;
    $erro_msg = "Não é possível emitir autorização de empenho, pois não há programação financeira aprovada para a instituição e o exercício atual.";
  }

  $oDataSessao  = new DBDate(date('Y-m-d', db_getsession('DB_datausu')));
  $oInstituicao = InstituicaoRepository::getInstituicaoByCodigo(db_getsession('DB_instit'));
  $oProgramacaoFinanceira = ProgramacaoFinanceira::getInstanciaPorInstituicaoAno($oInstituicao, $oDataSessao->getAno());
  $oFechamento = new FechamentoMensal($oProgramacaoFinanceira);
  if ($oFechamento->mesFechado($oDataSessao->getMes())) {

    $sqlerro  = true;
    $sMes     = DBDate::getMesExtenso($oDataSessao->getMes());
    $erro_msg = "Não é possível incluir Autorização de Empenho, pois a Programação Financeira já está fechada para o mês de {$sMes}.";
  }
        ]]>
      </add>
    </operation>
  </file>

  <file path="emp1_empautidot001.php">
    <operation>
      <search><![CDATA[/* [Extensão] Programação Financeira */]]></search>
      <add position="after">
        <![CDATA[
  require_once modification('model/orcamento/ProgramacaoFinanceira/ProgramacaoFinanceira.model.php');
    require_once modification('model/orcamento/ProgramacaoFinanceira/FichaFinanceira.model.php');
    require_once modification('model/orcamento/ProgramacaoFinanceira/FichaFinanceiraRepository.model.php');
    require_once modification('model/orcamento/ProgramacaoFinanceira/FichaFinanceiraValor.model.php');
    require_once modification('model/orcamento/ProgramacaoFinanceira/SaldoFichaFinanceira.model.php');

    if (!isset($o47_coddot) || empty($o47_coddot)) {
      throw new ParameterException("Campo Reduzido da Dotação é de preenchimento obrigatório.");
    }

    if (!isset($e56_anousu) || empty($e56_anousu)) {
      throw new ParameterException("Campo Ano é de preenchimento obrigatório.");
    }

    if (!isset($e54_valor) || empty($e54_valor)) {
      throw new ParameterException("Campo Valor é de preenchimento obrigatório.");
    }

    $oData = new DBDate(date(DBDate::DATA_EN, db_getsession('DB_datausu')));
    $iMes    = $oData->getMes();

    $oFichaFinanceira      = FichaFinanceiraRepository::getInstanciaPorDotacao(DotacaoRepository::getDotacaoPorCodigoAno($o47_coddot, $e56_anousu));
    $oSaldoFichaFinanceira = new SaldoFichaFinanceira($oFichaFinanceira, $iMes);
    
    $oPlugin       = new Plugin ( null, 'ProgramacaoFinanceira' );
    $aConfiguracao = PluginService::getPluginConfig ( $oPlugin );
    
    $aInstituicoesNaoValida = explode ( ",", $aConfiguracao["InstituicaoNaoValidaSaldo"] );
          
    if (!in_array($db_getsession("DB_instit"), $aInstituicoesNaoValida)) {
  
      if (!$oSaldoFichaFinanceira->possuiSaldoEmpenhar($e54_valor)) {
  
        $sValor = trim(db_formatar($oSaldoFichaFinanceira->getValorDisponivelParaEmpenho(), 'f'));
        $sMensagem  = "Não há saldo suficiente na ficha {$oFichaFinanceira->getDescricao()} para autorizar o empenho.";
        $sMensagem .= "\\n\\nSaldo Disponível: {$sValor}";
        throw new BusinessException($sMensagem);
      }
    }
        ]]>
      </add>
    </operation>
  </file>
  <file path="emp4_manutencaoPagamentoRPC.php">
    <operation>
      <search><![CDATA[/* [Extensão] Programação Financeira */]]></search>
      <add position="after">
        <![CDATA[
      require_once(modification("model/orcamento/ProgramacaoFinanceira/ProgramacaoFinanceira.model.php"));
      require_once(modification("model/orcamento/ProgramacaoFinanceira/FichaFinanceira.model.php"));
      require_once(modification("model/orcamento/ProgramacaoFinanceira/FichaFinanceiraRepository.model.php"));
      require_once(modification("model/orcamento/ProgramacaoFinanceira/FichaFinanceiraValor.model.php"));
      require_once(modification("model/orcamento/ProgramacaoFinanceira/SaldoFichaFinanceira.model.php"));
      require_once(modification("model/orcamento/ProgramacaoFinanceira/FechamentoMensal.model.php"));

      $oInstituicao = InstituicaoRepository::getInstituicaoByCodigo(db_getsession('DB_instit'));
      $iAnoSessao   = db_getsession('DB_anousu');
      if (!ProgramacaoFinanceira::possuiProgramacaoInstituicaoAno($oInstituicao, $iAnoSessao)) {
        throw new BusinessException('Não é possível efetuar pagamentos, pois não há programação financeira aprovada para a instituição e o exercício atual.');
      }

      $oDataSessao        = new DBDate(date('Y-m-d', db_getsession('DB_datausu')));
      $aCodigosMovimentos = array_map(function($oStdMovimento) {
        return $oStdMovimento->iCodMov;
      }, $oParam->aMovimentos);

      /*$sCodigosMovimentos = implode(',', $aCodigosMovimentos);
      $sSqlMovimentos     = "select e60_coddot, e81_codmov, e82_codord from empagemov ";
      $sSqlMovimentos    .= "inner join empempenho on e81_numemp = e60_numemp ";
      $sSqlMovimentos    .= "inner join empord     on e81_codmov = e82_codmov ";
      $sSqlMovimentos    .= "where e81_codmov in({$sCodigosMovimentos}) ";
      $rsDadosMovimentos  = db_query($sSqlMovimentos);
      if (!$rsDadosMovimentos || pg_num_rows($rsDadosMovimentos) === 0) {
        //throw new DBException("Não foi possível consultar o saldo das Fichas Financeiras.");
      }*/

      $aDadosMovimentos = db_utils::getCollectionByRecord($rsDadosMovimentos);
      $aMovimentosFichaSemSaldo = array();
      
      $oPlugin       = new Plugin ( null, 'ProgramacaoFinanceira' );
      $aConfiguracao = PluginService::getPluginConfig ( $oPlugin );
      
      $aInstituicoesNaoValida = explode ( ",", $aConfiguracao["InstituicaoNaoValidaSaldo"] );
            
      if (!in_array($db_getsession("DB_instit"), $aInstituicoesNaoValida)) {
        foreach ($aDadosMovimentos as $oDados) {

		    $oDotacao = DotacaoRepository::getDotacaoPorCodigoAno($oDados->e60_coddot, db_getsession('DB_anousu'));
		    $oFicha   = FichaFinanceiraRepository::getInstanciaPorDotacao($oDotacao);
		    $oSaldo   = $oFicha->getSaldoNoMes($oDataSessao->getMes());

		    /**
		     * Não há saldo suficiente na ficha
		     */
		    if (!$oSaldo->possuiSaldoPagar()) {

		      /**
		       * Verifica se a Ficha já não está no array
		       */
		      if (!isset($aMovimentosFichaSemSaldo[$oFicha->getCodigo()])) {
		        $aMovimentosFichaSemSaldo[$oFicha->getCodigo()] = array();
		      }
		      /**
		       * Verifica se a OP já não está no array
		       */
		      if (!in_array($oDados->e82_codord, $aMovimentosFichaSemSaldo[$oFicha->getCodigo()])) {
		        $aMovimentosFichaSemSaldo[$oFicha->getCodigo()][] = $oDados->e82_codord;
		      }
		    }
		  }
      }

      /**
       * Mostra erro apenas para a primeira ficha sem saldo
       */
      if (count($aMovimentosFichaSemSaldo) > 0) {

        db_fim_transacao(true);

        $sCodigos    = implode(', ', current($aMovimentosFichaSemSaldo));
        $sSaldoFicha = trim(db_formatar($oSaldo->getValorDisponivelParaPagamento(), 'f'));
        $sMensagem  = "Não é possível atualizar as Ordens de Pagamento: {$sCodigos}. O saldo da ficha financeira ";
        $sMensagem .= "{$oFicha->getDescricao()} é insuficiente.\n\nSaldo disponível: R$ {$sSaldoFicha}.";
        throw new BusinessException($sMensagem);
      }

      /**
       * Valida se o mês atual não esta fechado
       */
      $oProgramacaoFinanceira = ProgramacaoFinanceira::getInstanciaPorInstituicaoAno($oInstituicao, $iAnoSessao);
      $oFechamento = new FechamentoMensal($oProgramacaoFinanceira);

      if ($oFechamento->mesFechado($oDataSessao->getMes())) {

        $sMes = DBDate::getMesExtenso($oDataSessao->getMes());
        throw new BusinessException("Não é possível efetuar Pagamentos, pois a Programação Financeira já está fechada para o mês de {$sMes}.");
      }

        ]]>
      </add>
    </operation>
  </file>

  <file path="cai4_autorizacaorepasse001.php">
    <operation>
      <search><![CDATA[new AjaxRequest(]]></search>
      <add position="before">
        <![CDATA[
    if ( !possuiSaldoEmFichaFinanceira() ) {
      return false;
    }
        ]]>
      </add>
    </operation>

    <operation>
      <search><![CDATA[function completaContaPagadoraPadrao]]></search>
      <add position="before">
        <![CDATA[

  function possuiSaldoEmFichaFinanceira() {

    var oParametros = {
      'exec': 'verificarSaldoFichaFinanceira',
      'conta_pagadora': $F('codigo_conta'),
      'solicitacoes'  : oLancador.getRegistros(),
      'tipo'          : $('tipo').value
    };

    var lErroRetorno = true;
    new AjaxRequest(
      'orc4_programacaofinanceira.RPC.php',
      oParametros,
      function (oRetorno, lErro) {
        if (lErro) {
          alert(oRetorno.mensagem.urlDecode());
          lErroRetorno = false;
        }
      }
    ).setMessage('Aguarde, verificando saldo da Ficha Financeiras...').asynchronous(false).execute();
    return lErroRetorno;
  }

        ]]>
      </add>
    </operation>
  </file>
</modification>
